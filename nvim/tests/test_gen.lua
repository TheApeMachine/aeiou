-- Adjust package.path to find our Lua modules
package.path = 'nvim/lua/?.lua;nvim/lua/?/init.lua;' .. package.path

local function assert_true(v, msg)
  if not v then error(msg or 'assertion failed', 2) end
end

local function assert_eq(a, b, msg)
  if a ~= b then error((msg or 'not equal') .. string.format(' (%s ~= %s)', tostring(a), tostring(b)), 2) end
end

-- Stub UI toast so tests don't depend on notify
package.loaded['aeiou.ui'] = {
  toast = function(_) end,
}

-- Test 1: generate_from_prompt opens a buffer with returned code
do
  -- Stub HTTP layer to avoid curl/jobstart
  local call_count = 0
  package.loaded['aeiou.http'] = {
    post_json = function(url, payload, cb)
      call_count = call_count + 1
      if url:find('/transcode', 1, true) then
        cb(true, { goal = payload.prompt, constraints_explicit = {}, constraints_inferred = {}, verbosity = 'normal' })
      elseif url:find('/generate', 1, true) then
        cb(true, { code = '# Generated by AEIOU\nprint("ok")\n' })
      else
        cb(false, 'unknown url')
      end
    end,
  }

  local gen = require('aeiou.gen')

  -- Feed input prompt
  local orig_input = vim.ui.input
  vim.ui.input = function(opts, cb) cb('python: simple helper') end
  gen.generate_from_prompt()
  vim.ui.input = orig_input

  local buf = vim.api.nvim_get_current_buf()
  local lines = vim.api.nvim_buf_get_lines(buf, 0, -1, false)
  assert_true(#lines >= 1, 'no lines in generated buffer')
  assert_true(lines[1]:find('Generated by AEIOU') ~= nil, 'header missing in generated code')
  assert_true(call_count == 2, 'expected two HTTP calls')
end

-- Test 2: init autostart triggers sidecar.start when health fails
do
  local started = 0
  package.loaded['aeiou.sidecar'] = {
    health = function(cb) cb(false) end,
    start = function() started = started + 1 end,
    stop = function() end,
  }
  package.loaded['aeiou'] = nil -- force re-require fresh init.lua
  local aeiou = require('aeiou')
  aeiou.setup({ auto_start = true })
  assert_eq(started, 1, 'autostart did not invoke sidecar.start')
end

print('OK: test_gen.lua')


