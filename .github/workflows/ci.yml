name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('sidecar/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd sidecar
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        cd sidecar
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        cd sidecar
        mypy app/ --ignore-missing-imports

    - name: Test with pytest
      run: |
        cd sidecar
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./sidecar/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  neovim-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Neovim
      uses: rhysd/action-setup-vim@v1
      with:
        neovim: true
        version: nightly

    - name: Run Neovim tests
      run: |
        cd nvim
        # Install test dependencies if needed
        lua run.lua

  docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t aeiou-sidecar .

    - name: Test Docker image
      run: |
        docker run --rm aeiou-sidecar python -c "from app.main import app; print('Import successful')"

  release:
    needs: [test, neovim-test, docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Create release
      run: |
        echo "Release process would go here"
        # This could include:
        # - Version bumping
        # - Changelog generation
        # - GitHub release creation
        # - Docker image tagging and pushing