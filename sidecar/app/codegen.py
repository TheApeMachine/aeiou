from __future__ import annotations

from typing import Any


def stub_generate_code(spec: dict[str, Any]) -> str:
    """Produce a tiny scaffold based on the goal.

    This is a placeholder for real LLM-based generation. It ensures we
    have a deterministic output for tests.
    """
    goal = spec.get("goal", "task").strip().lower()
    header = "# Generated by AEIOU (stub)\n"
    if "python" in goal:
        return header + "\n".join([
            "def solve():",
            "    \"\"\"TODO: implement - " + spec.get("goal", "") + "\"\"\"",
            "    return None",
            "",
        ])
    # default minimal file
    return header + "\n".join([
        "# goal: " + spec.get("goal", ""),
        "",
    ])



