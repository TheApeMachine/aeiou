from __future__ import annotations

from fastapi.testclient import TestClient

from app.main import app


client = TestClient(app)


def test_health_ok():
    r = client.get("/health")
    assert r.status_code == 200
    assert r.json()["status"] == "ok"


def test_transcode_valid_schema():
    payload = {"prompt": "Create a function to add two numbers", "verbosity": "normal"}
    r = client.post("/transcode", json=payload)
    assert r.status_code == 200
    data = r.json()
    # Required by schema
    assert isinstance(data["goal"], str) and data["goal"]
    assert isinstance(data["constraints_explicit"], list)
    assert isinstance(data["constraints_inferred"], list)
    assert data["verbosity"] in {"minimal", "normal", "verbose"}


def test_generate_validates_and_returns_code():
    # First get a valid spec via /transcode
    t = client.post("/transcode", json={"prompt": "python: make a helper", "verbosity": "minimal"})
    assert t.status_code == 200
    spec = t.json()
    # Now call /generate
    g = client.post("/generate", json={"spec": spec})
    assert g.status_code == 200
    body = g.json()
    assert "code" in body
    assert isinstance(body["code"], str)
    assert "Generated by AEIOU" in body["code"]


def test_generate_rejects_invalid_spec():
    bad_spec = {"goal": "", "verbosity": "normal"}  # missing required arrays per schema
    g = client.post("/generate", json={"spec": bad_spec})
    assert g.status_code == 400


def test_generate_ops_returns_create_op():
    # Use a valid spec from transcode
    t = client.post("/transcode", json={"prompt": "add a python helper", "verbosity": "normal"})
    assert t.status_code == 200
    spec = t.json()
    r = client.post("/generate_ops", json={"spec": spec})
    assert r.status_code == 200
    body = r.json()
    assert isinstance(body.get("ops"), list)
    assert body["ops"][0]["action"] == "create"
    assert body["ops"][0]["path"].startswith("tests/")


